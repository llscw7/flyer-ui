/**
 * Flyer Dialog Store - 全局对话框状态管理
 * 基于 uni-app x UTS 语言实现
 */
import { reactive } from 'vue'

// 对话框配置接口
type DialogConfig = {
  title?: string
  content?: string
  confirmText?: string
  cancelText?: string
  showCancel?: boolean
  zIndex?: number
  id?: string
  maskClosable?: boolean
}

// 定义一个大写的 State 类型
export type State = {
  visible: boolean
  title: string
  content: string
  confirmText: string
  cancelText: string
  showCancel: boolean
  zIndex: number
  targetId: string | null
  maskClosable: boolean
  resolvePromise: ((value: boolean) => void) | null
  rejectPromise: ((reason?: any) => void) | null
}

// 实例化为响应式 state
export const state = reactive({
  visible: false,
  title: '提示',
  content: '',
  confirmText: '确定',
  cancelText: '取消',
  showCancel: true,
  zIndex: 9999,
  targetId: null,
  maskClosable: true,
  resolvePromise: null,
  rejectPromise: null
} as State)

// 状态管理方法
export const mutations = {
  // 显示对话框
  show(config?: DialogConfig): Promise<boolean> {
    // 设置默认值和用户配置
    state.title = config?.title || '提示'
    state.content = config?.content || ''
    state.confirmText = config?.confirmText || '确定'
    state.cancelText = config?.cancelText || '取消'
    state.showCancel = config?.showCancel != null ? config.showCancel : true
    state.zIndex = config?.zIndex || 9999
    state.targetId = config?.id || null
    state.maskClosable = config?.maskClosable != null ? config.maskClosable : true
    
    state.visible = true

    return new Promise<boolean>((resolve, reject) => {
      state.resolvePromise = resolve
      state.rejectPromise = reject
    })
  },

  // 确认操作
  confirm() {
    state.visible = false
    const resolve = state.resolvePromise
    this.reset()
    
    if (resolve != null) {
      resolve(true)
    }
  },

  // 取消操作
  cancel() {
    state.visible = false
    const resolve = state.resolvePromise
    this.reset()
    
    if (resolve != null) {
      resolve(false)
    }
  },

  // 关闭对话框
  close() {
    state.visible = false
    const reject = state.rejectPromise
    this.reset()
    
    if (reject != null) {
      reject('closed')
    }
  },

  // 重置状态
  reset() {
    state.targetId = null
    state.resolvePromise = null
    state.rejectPromise = null
  },

  // Alert 快捷方法（只有确定按钮）
  alert(content: string, title?: string): Promise<boolean> {
    return this.show({
      title: title || '提示',
      content: content,
      showCancel: false,
      confirmText: '确定'
    })
  },

  // Confirm 快捷方法（确定和取消按钮）
  showConfirm(content: string, title?: string): Promise<boolean> {
    return this.show({
      title: title || '确认',
      content: content,
      showCancel: true,
      confirmText: '确定',
      cancelText: '取消'
    })
  }
}

// 添加便捷方法的别名，保持向后兼容
export const showAlert = (content: string, title?: string): Promise<boolean> => {
  return mutations.alert(content, title)
}

export const showConfirm = (content: string, title?: string): Promise<boolean> => {
  return mutations.showConfirm(content, title)
}
