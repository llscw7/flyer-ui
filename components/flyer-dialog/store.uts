/**
 * Flyer Dialog Store - 全局对话框状态管理
 * 基于 uni-app x UTS 语言实现
 */
import { reactive } from 'vue'

// 对话框配置接口
export type DialogConfig = {
  title?: string
  content?: string
  confirmText?: string
  cancelText?: string
  showCancel?: boolean
  zIndex?: number
  id?: string
  maskClosable?: boolean
}

// 定义一个大写的 State 类型
export type State = {
  visible: boolean
  title?: string
  content: string
  confirmText: string
  cancelText: string
  showCancel: boolean
  zIndex: number
  targetId?: string
  maskClosable: boolean
  resolvePromise?: ((value: boolean) => void)
  rejectPromise?: ((reason?: any) => void)
}

// 实例化为响应式 state
export const state = reactive({
  visible: false,
  title: '提示',
  content: '',
  confirmText: '确定',
  cancelText: '取消',
  showCancel: true,
  zIndex: 9999,
  targetId: null,
  maskClosable: true,
  resolvePromise: null,
  rejectPromise: null
} as State)

// 内部重置函数
function resetState() {
  state.targetId = null
  state.resolvePromise = null
  state.rejectPromise = null
}

// 显示对话框的函数
export function show(config: DialogConfig): Promise<boolean> {
  // 设置默认值和用户配置
  if(config.title != null) {
    state.title = config.title
  }
  if(config.content != null) {
    state.content = config.content
  }
  if(config.confirmText != null) {
    state.confirmText = config.confirmText
  }
  if(config.cancelText != null) {
    state.cancelText = config.cancelText
  }
  if(config.showCancel != null) {
    state.showCancel = config.showCancel
  }
  if(config.zIndex != null) {
    state.zIndex = config.zIndex
  }
  if(config.id != null) {
    state.targetId = config.id
  }
  if (config.maskClosable != null) {
    state.maskClosable = config.maskClosable
  } else {
    state.maskClosable = true
  }

  state.visible = true

  return new Promise<boolean>((resolve, reject) => {
    state.resolvePromise = resolve
    state.rejectPromise = reject
  })
}

// 确认操作函数
export function confirm() {
  state.visible = false
  const resolve = state.resolvePromise
  resetState()
  
  if (resolve != null) {
    resolve(true)
  }
}

// 取消操作函数
export function cancel() {
  state.visible = false
  const resolve = state.resolvePromise
  resetState()
  
  if (resolve != null) {
    resolve(false)
  }
}

// 关闭对话框函数
export function close() {
  state.visible = false
  const reject = state.rejectPromise
  resetState()
  
  if (reject != null) {
    reject('closed')
  }
}

// 添加便捷方法的别名，保持向后兼容
export function showAlert(content: string, title: string = ''): Promise<boolean> {
  return show({
    title: title,
    content: content,
    showCancel: false,
    confirmText: '确定'
  })
}

export function showConfirm(content: string, title: string = ''): Promise<boolean> {
  return show({
    title: title,
    content: content,
    showCancel: true,
    confirmText: '确定',
    cancelText: '取消'
  })
}